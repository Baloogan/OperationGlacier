@{
    ViewBag.Title = "Map";
}
@Styles.Render("~/Content/leaflet.css")
@Scripts.Render("~/Scripts/leaflet.js")
<div id="map" style="width: 100%; height: 100%; background: black;"></div>
<style>
    body {
        background: black;
    }

    .container {
        margin-left: 0px;
        margin-right: 0px;
        width: 100%;
        max-width: none;
        background: black;
        overflow: hidden;
        height: 100%;
    }
</style>
<style type="text/css">
    html, body {
        height: 100%;
        margin: 0;
    }

    #wrapper {
        min-height: 100%;
    }
</style>
<style>
    .leaflet-popup {
        width: 500px;
    }
</style>
<script>
    var map = L.map('map', {
        crs: L.CRS.Simple,
        center: [-78, 95],
        zoom: 3
    });

    //L.tileLayer('https://secure.baloogancampaign.com:8081/map/render3/{z}/{x}/{y}.png', {
    L.tileLayer('https://loupvert.phpnet.org/dbimages/render3/{z}/{x}/{y}.png', {
        attribution: 'WitP-AE Topo Map Project',
        continuousWorld: true,
        id: 'map-render3',
        maxZoom: 6,
        minZoom: 3,
        noWrap: true,
    }).addTo(map);

    map.zoomControl.setPosition('topright');
    map.setMaxBounds([[-138, 12], [-14, 170]]);
</script>
<script>
    L.Circle = L.Circle.extend({
        projectLatlngs: function () {
            //this._point = this._map.latLngToLayerPoint(this._latlng);
            //this._radius = this._mRadius;
            var lngRadius = this._mRadius,
              latlng2 = new L.LatLng(this._latlng.lat, this._latlng.lng - lngRadius),
              point2 = this._map.latLngToLayerPoint(latlng2);

            this._point = this._map.latLngToLayerPoint(this._latlng);
            this._radius = Math.max(Math.round(this._point.x - point2.x), 1);
        },

        getBounds: function () {
            var radius = this._mRadius,
                latlng = this._latlng,
                sw = new L.LatLng(latlng.lat - radius, latlng.lng - radius),
                ne = new L.LatLng(latlng.lat + radius, latlng.lng + radius);

            return new L.LatLngBounds(sw, ne);
        }
    });
    function isEven(n) {
        return n == parseFloat(n) ? !(n % 2) : void 0;
    }
    (function () {
        var side = '@Ajax.JavaScriptStringEncode(ViewBag.Side)';
        var date = '@Ajax.JavaScriptStringEncode(ViewBag.Date)';
        var link = '/OperationGlacier/GameData/' + side + '/' + date + '/Turn.json';
        var turn = $.getJSON(link).done(function (data) {

            var aars = data.Hexes;
            $.each(aars, function(i, item) {

                var x = item.x;
                var y = item.y;
                var report = item.html;
                var lon = 0.6563 * x + 15.962;
                var lat = -0.593 * y - 15.499;
                if (isEven(y)) {
                    lon = lon - 0.6563 / 2.0;
                }
                var circle = L.circle([lat, lon], item.radius, {
                    color: item.color,
                    fillColor: item.fillColor,
                    fillOpacity: item.fillOpacity,
                }).addTo(map);
                circle.bindPopup('<pre><span class="inner-pre" style="font-size: 11px;line-height: 10px;">' + report + '</span></pre>', { maxWidth: 500, maxHeight: 300, });
            });
        });
    }).call(this);
</script>
